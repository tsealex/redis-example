
x-redis-common: &redis-common
  image: redis:latest
  restart: unless-stopped
  networks: [redisnet]
  healthcheck:
    test: ["CMD", "redis-cli", "-p", "7001", "PING"]
    interval: 3s
    timeout: 2s
    retries: 20

services:
  redis-1:
    <<: *redis-common
    container_name: redis-1
    command: >
      redis-server
      --port 7001
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7001
      --cluster-announce-bus-port 17001
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7001:7001", "17001:17001"]
    environment:
      - REDIS_CLUSTER_ANNOUNCE_PORT=7001
      - REDIS_CLUSTER_ANNOUNCE_BUS_PORT=17001
    volumes:
      - redis-1-data:/data
    # Map the healthcheck port correctly per-node:
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "PING"]
  redis-2:
    <<: *redis-common
    container_name: redis-2
    command: >
      redis-server
      --port 7002
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7002
      --cluster-announce-bus-port 17002
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7002:7002", "17002:17002"]
    volumes: [redis-2-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "PING"]

  redis-3:
    <<: *redis-common
    container_name: redis-3
    command: >
      redis-server
      --port 7003
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7003
      --cluster-announce-bus-port 17003
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7003:7003", "17003:17003"]
    volumes: [redis-3-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "PING"]

  redis-4:
    <<: *redis-common
    container_name: redis-4
    command: >
      redis-server
      --port 7004
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7004
      --cluster-announce-bus-port 17004
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7004:7004", "17004:17004"]
    volumes: [redis-4-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7004", "PING"]

  redis-5:
    <<: *redis-common
    container_name: redis-5
    command: >
      redis-server
      --port 7005
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7005
      --cluster-announce-bus-port 17005
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7005:7005", "17005:17005"]
    volumes: [redis-5-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7005", "PING"]

  redis-6:
    <<: *redis-common
    container_name: redis-6
    command: >
      redis-server
      --port 7006
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --cluster-announce-port 7006
      --cluster-announce-bus-port 17006
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
    ports: ["7006:7006", "17006:17006"]
    volumes: [redis-6-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7006", "PING"]

#  # One-shot init job: waits for all nodes healthy, then creates the cluster.
#  cluster-init:
#    image: redis:latest
#    depends_on:
#      redis-1: { condition: service_healthy }
#      redis-2: { condition: service_healthy }
#      redis-3: { condition: service_healthy }
#      redis-4: { condition: service_healthy }
#      redis-5: { condition: service_healthy }
#      redis-6: { condition: service_healthy }
#    networks: [redisnet]
#    entrypoint: ["/bin/sh","-c"]
#    command: >
#      echo "Forming cluster...";
#      yes yes | redis-cli --cluster create
#        redis-1:7001 redis-2:7002 redis-3:7003
#        redis-4:7004 redis-5:7005 redis-6:7006
#        --cluster-replicas 1;
#      echo "Cluster created.";

networks:
  redisnet: {}

volumes:
  redis-1-data:
  redis-2-data:
  redis-3-data:
  redis-4-data:
  redis-5-data:
  redis-6-data: